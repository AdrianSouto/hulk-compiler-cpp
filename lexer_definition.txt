# Lexer Definition for HULK Language
# This file defines the tokens and patterns for the HULK lexer generator

%{
#include <iostream>
#include <string>
#include <cstdlib>
%}

%%

# Keywords
"let" { printf("<LET>\n"); return LET; }
"in" { printf("<IN>\n"); return IN; }
"function" { printf("<FUNCTION>\n"); return FUNCTION; }
"type" { printf("<TYPE>\n"); return TYPE; }
"inherits" { printf("<INHERITS>\n"); return INHERITS; }
"new" { printf("<NEW>\n"); return NEW; }
"self" { printf("<SELF>\n"); return SELF; }
"base" { printf("<BASE>\n"); return BASE; }
"if" { printf("<IF>\n"); return IF; }
"elif" { printf("<ELIF>\n"); return ELIF; }
"else" { printf("<ELSE>\n"); return ELSE; }
"while" { printf("<WHILE>\n"); return WHILE; }
"for" { printf("<FOR>\n"); return FOR; }
"is" { printf("<IS>\n"); return IS; }
"as" { printf("<AS>\n"); return AS; }
"print" { printf("<PRINT>\n"); return PRINT; }
"true" { printf("<TRUE>\n"); return TRUE; }
"false" { printf("<FALSE>\n"); return FALSE; }

# Type keywords
"Number" { printf("<TYPE_NUMBER>\n"); return TYPE_NUMBER; }
"String" { printf("<TYPE_STRING>\n"); return TYPE_STRING; }
"Boolean" { printf("<TYPE_BOOLEAN>\n"); return TYPE_BOOLEAN; }

# Multi-character operators
"==" { printf("<EQEQ>\n"); return EQEQ; }
"!=" { printf("<NOTEQ>\n"); return NOTEQ; }
"<=" { printf("<LESSEQ>\n"); return LESSEQ; }
">=" { printf("<GREATEREQ>\n"); return GREATEREQ; }
"&&" { printf("<AND>\n"); return AND; }
"||" { printf("<OR>\n"); return OR; }
"@@" { printf("<CONCAT_SPACE>\n"); return CONCAT_SPACE; }
"=>" { printf("<ARROW>\n"); return ARROW; }
"**" { printf("<POWER>\n"); return POWER; }

# Single character operators and delimiters
"+" { printf("<PLUS>\n"); return PLUS; }
"-" { printf("<MINUS>\n"); return MINUS; }
"*" { printf("<MULTIPLY>\n"); return MULTIPLY; }
"/" { printf("<DIVIDE>\n"); return DIVIDE; }
"%" { printf("<MODULO>\n"); return MODULO; }
"@" { printf("<CONCAT>\n"); return CONCAT; }
"=" { printf("<EQUALS>\n"); return EQUALS; }
":=" { printf("<ASSIGN>\n"); return ASSIGN; }
"<" { printf("<LESS>\n"); return LESS; }
">" { printf("<GREATER>\n"); return GREATER; }
"!" { printf("<NOT>\n"); return NOT; }
"(" { printf("<LPAREN>\n"); return LPAREN; }
")" { printf("<RPAREN>\n"); return RPAREN; }
"{" { printf("<LBRACE>\n"); return LBRACE; }
"}" { printf("<RBRACE>\n"); return RBRACE; }
";" { printf("<SEMICOLON>\n"); return SEMICOLON; }
"," { printf("<COMMA>\n"); return COMMA; }
":" { printf("<COLON>\n"); return COLON; }
"." { printf("<DOT>\n"); return DOT; }

%%